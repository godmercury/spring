MVC((model–view–controller) 패턴 : 애플리케이션을 세 가지 역할로 구분한 개발 방법론
1. Model
  - Data와 애플리케이션이 무엇을 할 것인지를 정의하는 부분으로 내부 비즈니스 로직을 처리하기 위한 역할을 한다
  - 모델은 컨트롤러가 호출을 하면 DB와 연동하여 사용자의 입출력 데이터를 다루는 일과 같은 데이터와 연관된 비즈니스 로직을 처리하는 역할을 한다.
  - 데이터 추출, 저장, 삭제, 업데이트 등의 역할을 수행
2. View
  -  사용자에게 보여주는 화면(UI)
  - 사용자와 상호작용을 하며 컨트롤러로부터 받은 모델의 결과값을 사용자에게 화면으로 출력하는 일을 한다.
  - Model에서 받은 데이터는 별도로 저장하지 않는다.
3. Controller
  - Model과 View 사이를 이어주는 인터페이스 역할
  - Model이 데이터를 어떻게 처리할지 알려주는 역할
  - 사용자로부터 View에 요청이 있으면 Controller는 해당 업무를 수행하는 Model을 호출하고 Model이 업무를 모두 수행하면 다시 결과를 View에 전달하는 역할을 한다.


MVC 구동 원리
 ________		 ________		 ____________		 ____________		 ____________
|		|		|		|		|			|		|			|		|			|
|    Web	|  1. 요청	|    Web	|  2. 매칭	|    Controller	| 3. 호출	|			|   JDBC	|			|
| Browser	| ------->	|   Server	| ------->	|     	Servlet	| ------->	|	Model	|<------->|    Database	|
|		|		|		|		|			|		|			|     SQL	|			|
|		| <-------	|		| <-------	|			| <-------	|			|		|			|
|_______	|   9. 출력	|_______	|   8. 전달	|___________	|    5. 반환	|___________	|		|___________	|
									∧	|				    ∧
									|	| 6. 전달			    |
							      7. 전달	|	|				    |
								____|___	∨___		 _____ ∨_________________	
								|			|		|						|
								|	  View	| ------->	|	   Value Object(VO)		|
								|	  JSP		|    참조	|   Data Transfer Object (DTO)	|
								|___________	|		|_______________________	|

1. 웹 브라우저가 웹 서버에 웹 애플리케이션 실행을 요청한다. (MVC 구조가 WAS라고 보면 된다.)
2. 웹 서버는 들어온 요청을 처리할 수 있는 서블릿을 찾아서 요청을 전달한다. (Matching)
3. 서블릿은 모델 자바 객체의 메서드를 호출한다.
4. 데이터를 가공하여 값 객체를 생성하거나, JDBC를 사용하여 데이터베이스와의 인터랙션을 통해 값 객체를 생성한다.
5. 업무 수행을 마친 결과값을 컨트롤러에게 반환한다.
6. 컨트롤러는 모델로부터 받은 결과값을 View에게 전달한다.
7. JSP는 전달받은 값을 참조하여 출력할 결과 화면을 만들고 컨트롤러에게 전달한다.
8. 뷰로부터 받은 화면을 웹 서버에게 전달한다.
9. 웹 브라우저는 웹 서버로부터 요청한 결과값을 응답받으면 그 값을 화면에 출력한다.



프레임워크 종류
- Spring
- Struts
- AngularJS
- Django
- Laravel