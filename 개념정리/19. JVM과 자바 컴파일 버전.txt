JVM (Java Virtual Machine) 
- 자바 어플리케이션을 실행하는 가상 머신으로 실제 컴퓨터로부터 자바 어플리케이션 실행을 위한 메모리를 할당받아 Runtime Data Area를 구성한다.
- JVM은 인터프리터와 JIT 컴파일러를 통해 바이트 코드를 각 운영체제에 맞는 기계어로 해석시켜 실행시키고, 가비지 콜렉터를 통해 어플리케이션와 동적 메모리를 관리한다.

JRE (Java Runtime Environment)
- JRE는 자바 실행 환경으로 JVM,자바 클래스 라이브러리, 기타 자바 어플리케이션 실행에 필요한 파일들을 포함한다.

JDK (Java Development Kit)
- 자바 개발 환경으로 자바 어플리케이션을 개발하기 위해 필요한 도구를 제공한다.
- 자바 언어를 바이트 코드로 컴파일 해주는 자바 컴파일러(javac), 자바 클래스 파일을 해석해주는 역 어셈블리어(javap) 등이 있다.
 ____________________________________________
|											|
|                 JDK : javac, javap, javadoc, java, jar		|
|       ____________________________________	|
|	|									|	|
|	|                               JRE					|	|
|	|   - Class Libaries						|	|
|	|   - File for supporting execution of program	|	|
|	|       ____________________________	|	|
|	|	|							|	|	|
|	|	|                          JVM			|	|	|
|	|	|   - Garbage Collector			|	|	|
|	|	|   - Execution Engine				|	|	|
|	|	|   - Class Loader				|	|	|
|	|	|   - Runetime Data Area			|	|	|
|	|	|   - Interpreter					|	|	|
|	|	|   - JIT Compiler				|	|	|
|	|	|___________________________	|	|	|
|	|									|	|
|	|___________________________________	|	|
|											|
|___________________________________________	|


자바 동작 원리
1. 작성한 자바소스(확장자가 .java인 파일)를 자바 컴파일러를 통해 자바 바이트 코드(확장자가 .class인 파일)로 컴파일한다.
2. 컴파일된 바이트코드를 JVM의 Class Loader에게 전달한다.
   - Class Loader의 세부 동작
      1) 로드 : 클래스 파일을 가져와서 JVM의 메모리에 로드한다.
      2) 검증 : 자바 언어 명세(Java Language Specification) 및 JVM 명세에 명시된 대로 구성되어 있는지 검사한다.
      3) 준비 : 클래스가 필요로 하는 메모리를 할당한다. (필드, 메서드, 인터페이스 등등)
      4) 분석 : 클래스의 상수 풀 내 모든 심볼릭 레퍼런스를 다이렉트 레퍼런스로 변경한다.
      5) 초기화 : 클래스 변수들을 적절한 값으로 초기화한다. (static 필드)
3. Class Loader는 동적 로딩을 통해 필요한 클래스들을 로딩 및 링크하여 런타임 데이터 영역, 즉 JVM의 메모리에 올란다
4. 실행 엔진(Execution Engine)은 JVM 메모리에 올라온 바이트 코드들을 명령어 단위로 하나씩 가져와서 실행한다. 이때, 실행엔진은 2가지 방식으로 동작할 수 있다.
   - 자바 인터프리터 : 바이트 코드 명령어를 하나씩 읽어서 해석하고 실행. 하나하나의 실행은 빠르나, 전체적인 실행 속도가 느리다는 단점이 있다.
   - JIT 컴파일러(Just-In-Time Compiler)
      인터프리터의 단점을 보완하기 위해 도입된 방식으로 바이트 코드 전체를 컴파일하여 바이너리 코드로 변경하고 이후에는 해당 메서드를 더이상 인터프리팅 하지 않고, 바이너리 코드로 직접 실행. 
      하나씩 인터프리팅하여 실행하는 것이 아니라 바이트 코드 전체가 컴파일된 바이너리 코드를 실행하는 것이기 때문에 전체적인 실행속도는 인터프리팅 방식보다 빠르다.


JVM 구조 : JVM의 구조는 크게 보면, Garbage Collector, Execution Engine, Class Loader, Runtime Data Area로 나눌 수 있다.
1. Class Loader : JVM 내로 클래스 파일을 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈이다. 런타임 시에 동적으로 클래스를 로드한다.
2. Execution Engine : 클래스 로더를 통해 JVM 내의 Runtime Data Area에 배치된 바이트 코드들을 명렁어 단위로 읽어서 실행한다.
3. Garbage Collector(GC) : 힙 메모리 영역에 생성된 객체들 중에서 참조되지 않은 객체들을 탐색 후 제거하는 역할을 한다. 이때, GC가 역할을 하는 시간은 언제인지 정확히 알 수 없다.
4. Runtime Data Area : JVM의 메모리 영역으로 자바 애플리케이션을 실행할 때 사용되는 데이터들을 적재하는 영역이다.
   - Method area : 모든 쓰레드가 공유하는 메모리 영역. 메소드 영역은 클래스, 인터페이스, 메소드, 필드, Static 변수 등의 바이트 코드를 보관한다.
   - Heap area : 모든 쓰레드가 공유하며, new 키워드로 생성된 객체와 배열이 생성되는 영역. 또한, 메소드 영역에 로드된 클래스만 생성이 가능하고 Garbage Collector가 참조되지 않는 메모리를 확인하고 제거하는 영역이다.
   - Stack area : 메서드 호출 시마다 각각의 스택 프레임(그 메서드만을 위한 공간)이 생성한다. 그리고 메서드 안에서 사용되는 값들을 저장하고, 호출된 메서드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장한다. 마지막으로, 메서드 수행이 끝나면 프레임별로 삭제한다.
   - PC Register : 쓰레드가 시작될 때 생성되며, 생성될 때마다 생성되는 공간으로 쓰레드마다 하나씩 존재한다. 쓰레드가 어떤 부분을 무슨 명령으로 실행해야할 지에 대한 기록을 하는 부분으로 현재 수행중인 JVM 명령의 주소를 갖는다.
   - Native method stack : 자바 외 언어로 작성된 네이티브 코드를 위한 메모리 영역.



자바 컴파일 버전 확인하기
자바를 빌드하게 되면 클래스(class) 파일이 생성된다. 
클래스 파일은 같은 Java 소스여도 JDK 버전에 따라 다르게 작성될 수 있기 때문에 만약 실행하는 JVM이 지원하지 못하는 java class version을 로드하려고 할 경우 java.lang.UnsupportedClassVersionError 에러가 발생할 수 있다.
이처럼 빌드된 클래스 파일의 버전과 실행할 JVM의 버전이 다르면 에러가 날 수 있으므로  서로 맞춰주는것이 좋다.
1. 버전을 확인하고 싶은 class 파일이 있는 경로를 확인한다.
2. 명렁 프롬프트 창을 연뒤 class 파일이 있는 경로로 들어간다.
3. 명령 프롬프트에서 javap -verbose 클래스명.class | find "version" 명령을 입력하면 minor version과 major version이 출력된다.
4. 아래 표의 major version을 확인하고 컴파일된 자바 버전을 확인하면 된다.
	순서	자바 버전	major version
	1	자바2 (1.2)	46
	2	자바3 (1.3)	47
	3	자바4 (1.4)	48
	4	자바5			49
	5	자바6			50
	6	자바7			51
	7	자바8			52
	8	자바9			53
	9	자바10		54
	10	자바11		55
	11	자바12		56
	12	자바13		57
	13	자바14		58
	14	자바15		59
	15	자바16		60
	16	자바17		61
	17	자바18		62
