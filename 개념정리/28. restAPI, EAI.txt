API : 클라이언트, 서버와 같은 서로 다른 프로그램에서 요청과 응답을 주고받을 수 있게 만든 체계

REST API 
- HTTP URL을 통해 자원을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다.
- 구성
   1) 자원 (Resource) - URL
   2) 행위 (Verb) - Http Method
   3) 표현 (Representations)
- 규칙
  1) URL는 자원을 표현해야 한다.
       resource는 동사보다는 명사를, 대문자 보다는 소문자를 사용한다.
       resource의 도큐먼트 이름으로는 단수 명사를 사용해야한다.
       resource의 컬렉션 이름으로는 복수 명사를 사용해야한다.
       resource의 스토어 이름으로는 복수 명사를 사용해야한다.
       ex) GET /Member/1 → GET /members/1
  2) 자원에 대한 행위는 HTTP Method(GET, PUT, POST, DELETE 등)로 표현한다. 
       URL에 HTTP Method가 들어가면 안된다.
       ex) GET /members/delete/1 → DELETE /members/1
       URL에 행위에 대한 동사 표현이 들어가면 안된다.
       ex) GET /members/show/1 → GET /members/1
       ex) GET /members/insert/2 → POST /members/2
  3) 경로 부분 중 변화하는 부분은 유일한 값으로 대체한다.
       ex) student를 생성하는 route : POST /students
       ex) id=12인 student를 삭제하는 route : DELETE /students/12
  4) 슬래시 구분자(/)는 계층 관계를 나타내는데 사용한다.
  5) URL 마지막 문자로 슬래시(/)를 사용하지 않는다.
  6) 하이픈(-)은 URL 가독성을 높이는데 사용한다.
  7) 밑줄(_)은 사용하지 않는다.
  8) 파일확장자는 URL에 포함하지 않는다.
  9) 리소스 간에 연관 관계가 있는 경우 "/리소스명/리소스ID/관계가 있는 다른 리소스명" 으로 사용한다. (일반적으로 소유의 관계를 표현할 때 사용)

- 응답상태코드
  1XX : 전송 프로토콜 수준의 정보 교환
  2XX : 클라이언트 요청이 성공적으로 수행됨
  3XX : 클라이언트는 요청을 완료하기 위해 추가적인 행동을 취해야 함
  4XX : 클라이언트의 잘못된 요청
  5XX : 서버쪽 오류로 인한 상태코드

- URL 설계 예시
GET		/moves		영화 리스트
POST	/movies		영화 작성
PUT		/movies/{:id}	특정 영화 수정
DELETE	/movies/{:id}	특정 영화 삭제
POST	/movies/{:id}/recommendations	특정 영화 추천 (POST OR PUT)



EAI (Enterprise Application Integration)
- 기업 내부의 다양한 시스템과 애플리케이션 간에 상호 연동이 가능하도록 통합하는 솔루션
- 목적
  1. 각 시스템들이 개별적으로 연동되면 유지보수에 어려움이 생기가 운영체제가 다른 경우 통신을 위해 시스템을 수정해야 하는 상황이 발생함
  2. 정보의 통합 : 일관성 있는 여러 시스템들의 정보를 보증
  3. 프로세스 통합 : 응용 프로그램 간의 비즈니스 프로세스를 연결한다.
  4. 벤더에 대한 독립 : 응용 프로그램으로부터 업무의 정책과 규칙을 추출하고, EAI 시스템으로부터 구현하여 비즈니스 응용 프로그램 중 하나가 다른 벤더에 의해 수정되어도 비즈니스 규칙은 유지된다.
- 구축유형
   1. Point-to-Point
      - 가장 기본적은 애플리케이션 통합 방식
      - 변경 및 재사용이 어려움
   2. Hub & Spoke
      - 중앙 집중적 방식 (중앙에 있는 하나의 허브 시스템을 통해 데이터를 주고 받는다)
      - 확장 및 유지보수가 용이하다
      - 허브 장애 발생시 시스템 전체에 영향을 미친다
   3. Messaeg Bus
      - 애플리케이션 사이에 미들웨어(버스)를 두어 처리하는 방식
      - 확장성이 뛰어나고 대용량 처리가 가능하다
   4. Hybrid
      - Hub & Spoke 와 Message Bus를 혼합한 방식
      - 그룹 내에서는 Hub&Spoke 방식을, 그룹간에는 Message Bus방식을 사용한다.
      - 데이터 병목 현상을 최소화할 수 있다.
