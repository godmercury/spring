연산자
     종류			연산자				우선순위
 증감 연산자		++, --				1순위
 산술 연산자		+, -, *, /, %			2순위
 시프트 연산자	>>, <<, >>>			3순위
 비교 연산자		>, <. >=, <=, ==, !=	4순위
 비트 연산자		&, |, ^, ~				~만 1순위, 나머지는 5순위
 논리 연산자		&&, ||, !				!만 1순위, 나머지는 6순위
 조건(삼항) 연산자	?, :					7순위
 대입 연산자		=, *=, /=, %=, +=, -=	8순위


조건문
1. if
   if (조건1) {
      조건1이 참일때 실행
   }
2. if-else
   if (조건1) {
      조건1이 참일때 실행
   } else {
      조건1이 거짓일 때 실행
   }
3. if-else if-else
   if (조건1) {
      조건1이 참일때 실행
   } else if (조건2) {
      조건1이 거짓이고 조건2가 참일 때 실행
   } else if (조건3) {
      조건1,2가 거짓이고 조건3이 참일 때 실행
   } else {
      조건1,2,3이 거짓일 때 실행
   }
4. switch
   switch (변수) {
      case 값1 :
           값이 1일때 실행
           break;
      case 값2 :
           값이 2일때 실행
           break;
      case 값3 :
           값이 3일때 실행
           break;
      default :
           값1,2,3이 모두 아닐 경우 실행
           break;
   }



반복문
1. for : for (초기화식;  조건식; 증감식) {실행문;}
2. while : while(조건식) { 실행문; }
3. do-while : do {실행문} while (조건식);  // 조건식이 뒤로 오며 조건식이 true일 경우 반복, false일 경우 탈출한다. 최초 1번은 반드시 실행한다.


흐름제어문
1. break : 가장 가까운 loop를 벗어날 때 사용하고, 해당 loop 종료 후 다음 작업을 실행한다.
2. continue : 현재 진행중인 loop를 중단하고 다음 loop로 건너뛰어 진행한다.
3. return : 메소드 안에서 사용하는 분기문으로 현재 수행중인 메소드를 종료히키고 메소드를 호출한 수행문의 위치로 분기 이동한다.



   if (조건1) {
      조건1이 참일때 실행
   } else if (조건2) {
      조건1이 거짓이고 조건2가 참일 때 실행
   } else {
      조건1, 조건2가 거짓일 때 실행
   }
