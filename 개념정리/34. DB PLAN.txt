DB PLAN

1. explain plan
- 옵티마이져가 SELECT, UPDATE, INSERT, DELETE을 실행하기 위해 선택한 실행계획을 보여준다. 
- 실행계획이란 옵티마이져가 특정 SQL문을 실행하기 위해 수행한 일련의 동작(OPERATIONS)을 트리형식으로 표현한 것이다.
- EXPAIN PLAN의 결과는 사용자로 하여금 옵티마이져가 왜 특정 실행계획을 선택했는지를 이해할 수 있게 해주고 쿼리문의 성능을 판단하는데 도움을 준다.

2. 실행계획이 보여주는 정보
- 쿼리문이 참조한 테이블들의 순서
- 쿼리문이 참조한 테이블들의 접근방법(ACESS PATH)
- 조인에 의해 영향받는 테이블들의 조인방법(JOIN MEHTOD)
- 데이터 조작방법(filter, sort, or aggregation,etc)

3. 피해야 하는 항목
- Full scans : 의도하지 않은 Full scans
- Unselective range scans : 100건을 조회하기 위해 백만건을 스캔하는 경우
- Late predicate filters : ?
- Wrong join order : 잘못된 조인순서는 처리범위를 증가시킨다.
- Late filter operations : 필터로 버릴 것이 있다면 조인 전에 필터하는 것이 좋다.


ORACLE PLAN 보는 법
-  Explain plan for  사용
- 상하 레벨 간에는 "ID가 낮은거" 먼저, 동급 레벨은 "ID가 높은거" 먼저 실행
- 항목의 의미
   Id : 실행계획의 오퍼레이션ID
   Operation : 해당단계에 수행한 작업 내용
   Name : 해당단계에 작업을 수행한 대상 오브젝트(테이블 or 인덱스)
   Rows : 해당 단계 수행 시 조회될 예상 데이터 건수
   Bytes : 해당 단계까지 사용될 예상 데이터 양(누적)
   Cost : 해당 단계까지 사용될 예상 비용(누적)
   Time : 해당 단계까지 사용될 예상 시간(누적)



MariaDB PLAN 보는 법
- explain 사용
- 항목의 의미
   id : 쿼리 내의 select 문의 실행 순서
   select_type : select 문의 유형.
     - SIMPLE: 단순 select ( union이나 서브쿼리를 사용하지 않음 )
     - PRIMARY: 가장 외곽에 있는 select문
     - UNION: union에서의 두번째 혹은 나중에 따라오는 select문
     - DEPENDENT UNION: union에서의 두번째 혹은 나중에 따라오는 select문, 외곽 쿼리에 의존적이다.
     - UNION RESULT: union의 결과물
     - SUBQUERY: 서브쿼리의 첫번째 select
     - DEPENDENT SUBQUERY: 서브쿼리의 첫번째 select, 바깥 쪽 쿼리에 의존적이다.
     - DERIVED: from절의 서브쿼리
  table : 참조하고 있는 테이블명
  type : 조인타입이며 쿼리 성능과 아주 밀접한 항목. 아래 항목들 중에서 밑으로 갈 수록 안 좋은 쿼리 형태이다.
     - system : 테이블에 단 하나의 행만 존재(=시스템 테이블). const 조인의 특별한 형태이다.
     - const : 하나의 매치되는 행만 존재하는 경우. 하나의 행이기 때문에 상수로 간주되며, 한번만 읽어들이기 때문에 무척 빠르다.
     - eq_ref : 조인수행을 위해 각 테이블에서 하나의 행만이 읽혀지는 형태. const 타입 외에 가장 훌륭한 조인타입이다. ( PRIMARY KEY또는 UNIQUE인덱스 인 경우)
     - ref : ref조인에서 키의 가장 왼쪽 접두사 만 사용하거나 키가 a PRIMARY KEY또는 UNIQUE인덱스 가 아닌 경우 (즉, 조인이 키 값을 기반으로 단일 행을 선택할 수없는 경우) 사용된다. 사용되는 키가 몇 개의 행과 만 일치하는 경우 이는 좋은 조인 유형이다.
     - fulltext : fulltext 색인을 사용하여 수행된다.
     - ref_or_null : 이 조인 유형은 비슷 ref하지만 MySQL이 NULL값 을 포함하는 행을 추가로 검색한다는 점이 다르다. 이 조인 유형 최적화는 하위 쿼리를 해결하는 데 가장 자주 사용된다.
     - index_merge : 인덱스 병합 최적화가 적용되는 조인타입. 이 경우, key컬럼은 사용된 인덱스의 리스트를 나타내며 key_len 컬럼은 사용된 인덱스중 가장 긴 key명을 나타낸다.
     - range : 인덱스를 사용하여 주어진 범위 내의 행들만 추출된다. key 컬럼은 사용된 인덱스를 나타내고 key_len은 사용된 가장 긴 key부분을 나타낸다. ref 컬럼은 이 타입의 조인에서 NULL 이다. range 타입은 키 컬럼이 상수와 =, <>, >, >=, <, <=, IS NULL, <=>, BETWEEN 또는 IN 연산에 사용될때 적용된다.
     - index : 인덱스 FULL SCAN , 인덱스를 구성하는 컬럼만으로 조회가 가능할때 사용 ( 커버링 인덱스 ), 데이터 파일을 전체 스캔하는 것보다는 인덱스만 스캔하는 것이 빠르기 때문
     - ALL : 이전 테이블과의 조인을 위해 풀스캔이 된다. 만약 조인에 쓰인 첫 테이블이 고정이 아니라면 비효율적이다. 그리고 대부분의 경우 아주 느리며, 보통 상수값이나 상수인 컬럼값으로 row를 추출하도록 인덱스를 추가하여 ALL 타입을 피할 수 있다.
  possible_keys : MySQL이 해당 테이블의 검색에 사용할 수 있는 인덱스들을 나타낸다.
  key : MySQL이 실제 사용한 key나 인덱스
  key_len : MySQL이 사용한 인덱스의 길이. key 컬럼의 값이 NULL이면 이 컬럼의 값도 NULL이다.
  ref : 행을 추출하는 데 키와 함께 사용 된 컬럼이나 상수값
  rows : 이 값은 쿼리 수행에서 MySQL이 찾아야하는 데이터행 수의 예상값
  filtered : filetered열에 나타난 조건에 의해 필터링 될 테이블 행의 예상 비율
  Extra : MySQL이 이 쿼리를 어떻게 해석하는 지에 대한 추가 정보