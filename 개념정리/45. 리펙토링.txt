리팩토링
외부에서 보는 프로그램동작은 바꾸지 않고 프로그램 내부 구조를 개선하는 것을 의미한다.


목적
- 버그를 발견하기 쉽게 만든다
- 기능을 추가하기 쉽게 만든다
- 리뷰하기 쉽게 만든다


리팩토링해야 하는 소스 찾기
- 중복코드
   합칠 수 있는 것을 찾아서 메서드 추출 혹은 클래스 추출 리팩토링 검토
   null 체크가 이곳 저곳에 존재한다면 null 객체 도입이라는 리펙토링이 효과적
   에러 확인이 많다면 에러 코드를 예외로 치환 리팩토링을 검토
- 너무 긴 메서드
   코드 모음을 정리해서 새 메서드로 만드는 리팩토링 검토 (메서드 추출)
   메서드가 너무 많으면 책임별로 클래스를 나눠서 클래스 추출하는 리팩토링 필요
- 클래스가 너무 많을 때
   패키지에 클래스가 너무 많은 경우 중개자 제거 리팩토링, 클래스 인라인화, 메서드 인라인화 같은 리팩토링 필요
- 이름이 맞지 않을 때
- 너무 공개적일 때
   - 생성자를 팩토리메서드로 치환하는 리팩토링을 도입하면 클래스명을 숨길 수 있다.
- 객체 지향답지 않을 때


주의점
- 두 가지를 한꺼번에 수정하지 않는다.
- 리팩토링 이후에 어떤 문제가 생겨 원래대로 되돌려야 할 수 있기 때문에 되돌리기 쉽게 한다.
- 단계마다 프로그램을 컴파일하고 테스트해 리팩토링이 정상적으로 진행되었는지 확인한다.
- 동작하는 상태를 유지하면서 새로운 코드를 추가해서 오래된 것이 모두 새로워지면 오래된 것을 제거하는 방향으로 작업한다.


방법
- Java Code Convention을 지키면서 프로그래밍을 한다.
- Indent(들여쓰기) depth를 3이 넘지 않도록 구현한다.(2까지만 허용)
- 함수(또는 메서드)가 한 가지 일만 하도록 최대한 작게 만단다.
- 함수(또는 메서드)의 길이가 15라인을 넘어가지 않도록 구현한다.
- else 예약어를 쓰지 않는다.
- if 조건절에서 값을 return 하도록 구현하면 else를 사용하지 않아도 된다.





참조 URL
https://zzang9ha.tistory.com/307
https://www.inflearn.com/course/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81#reviews