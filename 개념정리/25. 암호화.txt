양방향 암호화 : 암호화된 데이터에 대한 복호화가 가능한 암호화 방식
1. 대칭키
   - 암복호화키가 동일하며 해당 키를 아는 사람만이 문서를 복호화할 수 있다.
   - 대포적인 알고리즘으로 DES, 3DES, AES, SEED, ARIA 등이 있다.
   - 장점 : 공개키 암호화 방식에 비해 속도가 빠르다.
   - 단점
      1) 키를 교환해야하는 문제(키 배송 문제)가 발생한다.
      2) 키를 교환하는 중에 키가 탈취될 수 있다.
      3) 사람이 증가할수록 전부 키를 따로따로 교환해야 하므로 관리해야할 키가 방대해진다.
      4) 키의 사전 공유에 의한 해결, 키 배포센터에 의한 해결, Diffie-Hellman 키 교환에 의한 해결, 공개키 암호 방식 사용으로 해결
2. 공개키
   - 키가 공개되어 있기 때문에 키를 교환할 필요가 없어지며 공개키는 모든 사람이 접근 가능한 키이고 개인키는 각 사용자만이 가지고 있는 키이다.
   - 순서
      1) 공개키/개인키 쌍 생성
      2) 공개키는 공개, 개인키는 본인이 소유
      3) 송신자가 수신자의 공개키를 받아옴
      4) 송신자가 수신자의 공개키를 사용해 데이터 암호화
      5) 암호화된 데이터를 수신자에게 전송
      6) 수신자는 암호화된 데이터를 수신자의 개인키로 복호화(이로써 수신자만 볼 수 있다.)
   - 장점
      1) 공개키는 공개되어 있기 때문에 키교환이나 분배를 할 필요가 없어진다.
      2) 개인키를 가지고 있는 수신자만이 암호화된 데이터를 복호화할 수 있으므로 일종의 인증기능도 제공한다.
   - 단점 : 대칭키 암호화 방식에 비해 속도가 느리다.



단방향 암호화 : 암호화된 데이터에 대한 복호화가 불가능한 암호화 방식
1. Hash
   - 임의의 길이 메시지로부터 고정길이의 해시값을 계산한다.
   - 메시지가 다르면 해시값도 달라지는 특성으로 인해 해시함수를 무결성 확인의 용도로 사용하기도 한다.
   - 대표적인 알고리즘으로 MD5, SHA-256/512등이 있다.
   - 취약점
      1) Rainbow Table Attack : 미리 해쉬값들을 계산해 놓은 테이블을 통해 역산한다.
      2) 처리속도가 최대한 빠르도록 설계된 해시함수의 속성 때문에 공격자는 매우 빠른 속도로 임의 문자열의 다이제스트와 해킹할 다이제스트를 비교할 수 있다.(패스워드를 알아내는데 긴 시간이 걸리지 않는다.)
   - 보완법 (시간이 오래 걸릴 뿐 결국 뚫리기에 해결책은 아니다)
      1) Salting : 실제 비밀번호 이외에 추가적으로 랜덤 데이터들을 더해서 해시값을 계산한다.
      2) Key Stretching : 단방향 해쉬값을 계산한 후 그 해쉬값을 계속 해쉬해나간다. 해킹이 힘들도록 시간을 끈다고 생각하면 된다.
2. MAC
   - 임의 길이의 메시지와 송수신자가 공유하는 키를 기반으로 하는 고정 길이의 출력값을 계산하는 함수로 출력한 값을 MAC라고 한다.
   - 메시지 인증 코드는 메시지의 무결성을 확인하고 메시지에 대한 인증을 할 때 사용된다.
   - 순서
      1) 메시지와 키를 이용해 MAC값을 구하고 송신자는 메시지에 MAC값을 끼워 보낸다. 
      2) 수신자는 받은메시지와 본인의 키로 MAC알고리즘을 통해 MAC값을 구하고 송신자가 보낸 MAC값과 일치하는지 확인한다.
      3) 이를 통해 메시지의 데이터 인증과 더불어 무결성을 보호한다.



웹구간 암호화
1. SSL
   - 웹서버와 클라이언트의 통신 암호화 프로토콜로 인터넷 연결을 보보하기 위한 표준 기술이다.
   - 개인 데이터나 금융 데이터 등의 전송되는 정보를 보거나 훔치는 것을 방지한다.
2. TLS
   - SSL의 향상된, 더욱 안전한 버전
PS. https : 웹사이트가 SSL/TLS 인증서로 보호되는 경우 HTTPS가 URL에 표시된다. 사용자는 브라우저 표시줄의 자물쇠 기호를 클릭해 발급 기관 및 웹사이트 소유자의 상호를 포함한 인증서의 세부 정보를 볼 수 있다.



DB데이터 암호화
1. Plug-in 방식 :  DB서버 암호화
   - 암복화화 모듈이 DB서버에 설치되고, dB서버에서 플러그인으로 연결된 암복호화모듈을 호출하는 방식
   - DBMS 내 Plug-in형태 모듈을 적용하여 암/복호화 수행
   - 장점 : 어플리케이션 변경 최소화
   - 단점 : 대용량 처리 시 암복호화 처리에 따른 DB서버 부하가 큼. DBMS 패치에 영향을 받음. 암호화구간이 짧음 
   - DB서버에서 플러그인 호출할때 부하 발생하여 성능 저하. 트랜잭션이 많지 않은 시스템에 적합
   - 구축 시 응용프로그램 수정 최소화할 수 있으나, 기존 DB스키마와 대응하는 뷰를 생성하고 암호화할 테이블을 추가하는 작업 필요
2. API 방식 : 응용프로그램 자체 암호화
   -암복호화 모듈이 API 라이브러리 형태로 각 애플리케이션 서버에 설치되어 응용프로그램에서 해당 암복호화 모듈을 호출하는 방식으로 애플리케이션 서버와 DB서버간의 통신에서 암호화된 데이터 전송 보장
   - 어플리케이션(응용프로그램) 소스를 수정(암/복호화 API 적용)하여 암/복호화 수행
   - 장점 : 암복호화 속도 빠르고, DB서버에 영향을 주지 않아 DB성능저하가 적은 편. 암호화구간이 길다
   - 단점 : 적용된 어플리케이션 패치에 영향 받음. 구축 시 응용프로그램 전체/일부 수정 필요
   - 신규 구축 시 적합
3. Hybrid 방식 : API방식과 Plug-In 방식 혼용
   - 대용량 트랜잭션 처리는 API 방식을 사용하여 성능 저하를 최소화하고, 나머지는 플러그인 방식을 사용하여 애플리케이션 수정 최소화
4. TDE 방식 : DBMS 자체 암호화 방식
   - DB 내부에서 데이터파일 저장 시 암호화하고 메모리영역으로 가져올때 복호화
   - DBMS 엔진에 최적화된 성능
   - 지원하는 DBMS가 한정되어 있음
5. 파일 암호화 방식 : 운영체제 암호화 방식
   - 운영체제에서 파일을 암호화하는 방식으로 비정형 데이터도 암호화 가능
   - DB서버에 부하가 갈 수 있고 지원하는 OS가 한정되어 있음
6. Secure Proxy 방식
   - 암호화 복호화 Agent를 DBMS 외부에 설치하여 독립적으로 운영되는 방식
   - 장점 : 애플리케이션 및 DB 서버와 상관없이 독립적으로 운용되므로 해당 서버들의 성능저하가 발생하지 않는다.
7. 커널방식
   - DB 서버의 커널단에서 암호화하여 저장하고, 읽어올때 다시 커널 단에서 복호화하여 메모리로 가져오는 방식
   -  장점: SQA 질의의 수정이 없고, 기존 DBMS 시스템에서도 추가적인 수정이 전혀 없이 그대로 유지하며 암호화를 적용할 수 있다.