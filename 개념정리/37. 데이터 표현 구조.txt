JSON
- 좀 더 쉽게 데이터를 교환하고 저장하기 위하여 만들어진 텍스트 기반의 데이터 교환 표준
- 자바스크립트를 기반으로 만들어졌다.
- 브라우저 통신을 위한 속성-값 또는 키-값 쌍으로 이루어진 데이터 포맷.
- 장점
   사용하기 쉽다
   적은 메모리 공간을 사용하기 때문에 빠르다
   모든 브라우저에 대한 지원 제공
   생성, 조작, 읽기 , 쓰기가 쉽다
   직렬화가 가능하다
   javaScript 의 모든 객체를 JSON으로 변환하여 JSON을 서버로 보낼 수 있는 텍스트이다
- 단점
   네임 스페이스 지원이 없다. ( 확장성이 부족)
   형식적인 문법 정의 지원( 문법을 지켜야한다)
   제한된 개발 도구 지원
- ex
	{"employees":[
	  { "firstName":"John", "lastName":"Doe" },
	  { "firstName":"Anna", "lastName":"Smith" },
	  { "firstName":"Peter", "lastName":"Jones" }
	]}

XML
- HTML과 매우 비슷한 문자 기반의 마크업 언어이다.
- HTML처럼 데이터를 보여주는 목적이 아닌 데이터를 저장하고 전달하는 목적으로 만들어졌다.
- XML 태그는 HTML 태그 처럼 미리 정의 되어 있지 않고, 사용자가 직접 정의할 수 있다.
- 장점
   시스템 및 애플리케이션간에 문서 전송이 가능하다
   서로 다른 플랫폼 간에 데이터 교환이 가능하다
   HTML에서 데이터를 분리한다
   플랫폼 변경 프로세스를 단순화한다
- 단점
   처리 응용 프로그램이 필요하다
   내장 데이터 유형 지원이 없다
   XML 구문이 중복된다
   사용자가 자신의 태그를 생성하는 것을 허용하지 않는다
   텍스트 기반 데이터 전송 형식과 유사하다
- ex
	<employees>
	  <employee>
	    <firstName>John</firstName> <lastName>Doe</lastName>
	  </employee>
	  <employee>
	    <firstName>Anna</firstName> <lastName>Smith</lastName>
	  </employee>
	  <employee>
	    <firstName>Peter</firstName> <lastName>Jones</lastName>
	  </employee>
	</employees>



공통점
- 데이터를 저장하고 전달하기 위해 고안되었다.
- 기계뿐만 아니라 사람도 쉽게 읽을 수 있다.
- 계층적인 데이터 구조를 가진다.
- 다양한 프로그래밍 언어에 의해 파싱될 수 있다.
- XMLHttpRequest 객체를 이용하여 서버로부터 데이터를 전송받을 수 있다.


차이점
구분			   JSON			XML
종료 태그 사용	   사용 안함			사용함
구문 길이		   짧다			길다
읽기/쓰기 속도	   빠르다			느리다
네임 스페이스	   제공 안함			제공함
배열			   사용 가능			사용 불가능
파싱			   eval() 함수로 파싱	XML 파서로 파싱
데이터 표시		   없음			제공
안전성			   비교적 낮다		비교적 높다
인코딩			   UTF-8			다용한 인코딩 형식 지원