1. 구조적 방법론 (Structured Development) - 1970년대
    전체 시스템을 기능에 따라 나누어 개발하고 이를 통합하는 분할과 정복 접근 방식의 방법론
    절차 지향 소프트웨어 방법론으로 제한된 구조에서 코드 생성 및 순차적 실행
    프로세스 단위로 문제 해결
    장점: 명확한 요구사항을 추출하여 설계에 반영이 가능하고 효율적인 재사용 및 유지보수 가능
    단점: 단위적 프로젝트에서만 사용하므로 데이터 모델링 방법과 명확한 벙법론적 지침이 미흡하다.
    대포 모델링: 폭포수 모델

2. 정보공학 방법론 (Information Engineering Development) - 1980년대
    기업의 정보시스템 구축을 위해 계획/분석/설계 등 전 과정을 정형화 시킨 절차 및 방법론
    개발 주기를 이용해 대형 프로젝트를 수행하는 체계적인 방법론
    과정: 설계 및 구현 단계(데이터 우선 개발) > 문제 영역 세분화 > Top-Down 방식 전개
    빠른 결과물 확인이 가능하며 단순 S/W 개발이 아닌 기업의 경영전략에 초점을 둔다.
    장점: 일관성있고 통일된 정보시스템 구축이 가능하고 업무 절차 및 환경 변화에 유연하다.
    한계: 효과적으로 이행하기 위해서는 장시간이 소요되고 특정 사업 영역으로부터 독립된 시스템 개발 분야에서는 부적합
    대표 모델링: 프로토타입

3. 객체지향 방법론 (Object-Oriented Development) - 1990년대
    객체라는 기본 단위로 시스템을 분석 및 설계하는 방법론
    복잡한 현실 세계를 사람이 이해하는 방식으로 시스템에 적용하는 방법론
    분석과 설계, 구현의 전 과정을 객체 중심으로 개발하여 추상화, 캡슐화, 정보은폐, 상속, 다형성의 속성을 모두 가지고 있다.
    장점: 사용자의 요구사항 반영 및 모든 단계를 유기적으로 협력시킨다. 전체 프로세스 방향성 유지와 상속에 의한 재사용성 향상. 현실 반영을 통한 분석 설계의 갭 최소화. 유지보수 용이
    한계: Software 기술 없이는 구현이 어려움
    대표 모델링: 반복-점증적 모델(Interative and Incremental)

4. 컴포넌트 기반 방법론 (CBD; Component Based Development)
    소프트웨어를 구성하는 컴포넌트를 조립해서 하나의 새로운 응용 프로그램을 작성하는 방법론
    개발 기간 단축으로 인한 생산성 향상
    새로운 기능 추가 쉬움
    소프트웨어 재사용이 가능
    장점: 생선상 및 품질 향상. 시스템 유지보수 비용 최소화
    한계: 높은 설계 및 수준을 요구하는 컴포넌트 특성에 비해 국내 기술이 부족함. 개발된 컴포넌트를 공유 및 활용할 수 있는 유통 플랫폼 미흡

5. 애자일 방법론 (Agile Development)
    절차보다는 사람이 중심이 되어 변화에 유연하고 신속하게 적응하면서 효율적으로 시스템을 개발할 수 있는 신속 적응적 경량 개발 방법론
    애자일은 개발 과정의 어려움을 극복하기 위해 적극적으로 모색한 방법론
    절차 < 사람/문서 < 소프트웨어/사전계획 < 변화에 즉각대응/계약,혐상 < 고객과의 협력
    개발 과정
      1) 개발 범위 안에 있는 요구사항 분석 후 우선순위 순으로 개발
      2) 개발된 부분에 대해 실행하는 모습 시연 후 고객 평가 수렴
      3) 고객의 요구사항/개선사항을 반영하여 다음 버전 개발에 참고
      4) 위의 과정을 반복하며 소프트웨어 개발 범위를 점진적으로 확장
      => 단계별로 고객에서 소프트웨어 동작 시연 후 요구사항에 대한 피드백 수용이 포인트이다
    대포 모델링: XP, SCRUM, FDD, Crystal 방법론

6. 제품 계열 방법론 (Product Line Development)
    특정 제품에 적용하고 싶은 공통된 기능을 정의하여 개발하는 방법론
    임베디드 소프트웨어를 작성하는 데 유용한 방법론
    영역 공학과 응용 공학으로 구분
       - 영역 공학: 영역 분석, 영역 설계, 핵심 자산을 구현하는 영역
       - 응용 공학: 제품 요구분석, 제품 설계, 제품을 구현하는 영역




애자일 방법론의 유형
1. XP(eXtreme Programming)
    의사소통 개선과 즉각적 피드백으로 소프트웨어 품질을 높이기 위한 방법론
    1~3주의 반복(Iteration) 개발주기
    XP의 5가지 가치
      - 용기(Courage): 용기를 가지고 자신감 있게 개발(코드를 작성하기 전에 테스트, 빠르게 피드백, 테스트에 부합하지 못하는 코드를 리팩토링할 수 있는 용기)
      - 단순성(Simplicity): 필요한 것만 하고 그 이상의 것들은 하지 않음
      - 의사소통(Communication): 개발자, 관리자, 고객 간의 원활한 소통
      - 피드백(Feedback): 의사소통에 대한 빠른 피드백
      - 존중(Respect): 팀원 간의 상호 존중
    XP의 12가지 기본원리
      - 짝 프로그래밍(Pair Programming): 개발자 둘이서 짝으로 코딩하는 원리
      - 공동 코드 소유(Collective Ownership): 시스템에 있는 코드는 누구든지 언제라도 수정 가능하다는 원리
      - 지속적인 통합(CI; Continuous Integration): 매일 여러 번씩 소프트웨어를 통합하고 빌드해야 한다는 원리
      - 계획 세우기(Planning Process): 고객이 요구하는 비즈니스 가치를 정의하고, 개발자가 필요한 것은 무엇이며 어떤 부분에서 지연될 수 있는지를 알려주어야 한다는 원리
      - 작은 릴리즈(Small Release): 작은 시스템을 먼저 만들고, 짧은 단위로 업데이트한다는 원리
      - 메타포어(Metaphor): 공통적인 이름 체계와 시스템 서술서를 통해 고객과 개발자 간의 의사소통을 원활하게 한다는 원리
      - 간단한 디자인(Simple Desing): 현재의 요구사항에 적합한 가장 단순한 시스템을 설계한다는 원리
      - 테스트 기반 개발(TDD; Test Driven Develop): 작성해야 하는 프로그램에 대한 테스트를 먼저 수행하고 이 테스트를 통과할 수 있도록 실제 프로그램의 코드를 작성한다는 원리
      - 리팩토링(Refactoring): 프로그램의 기능을 바꾸지 않으면서 중복제거, 단순화 등을 위해 시스템 재구성한다는 원리
      - 40시간 작업(40-Hour Work): 개발자가 피곤으로 인해 실수하지 않도록 일주일에 40시간 이상을 일하지 말아야 한다는 원리
      - 고객 상주(On Site Customer): 개발자들의 질문에 즉각 대답해 줄 수 있는 고객을 프로젝트에 풀타임으로 상주시켜야 한다는 원리
      - 코드 표준(Coding Standard): 효과적인 공동 작업을 위해서는 모든 코드에 대한 코딩 표준을 정의해야 한다는 원리

2. 스크럼(Scrum)
    매일 정해진 시간, 장소에서 짧은 시간의 개발을 하는 팀을 위한 프로젝트 관리 중심 방법론
    백로그(Backlog)
      - 제품과 프로젝트에 대한 요구사항
    스프린트(Sprint)
      - 2~4주의 짧은 개발 기간으로 반복적 수행으로 개발품질 향상
    스크럼 미팅(Scrum Meeting)
      - 매일 15분 정도 미팅으로 To-Do List 계획수립
      - 데일리 미팅(Daily Meeting)이라고도 함
    스크럼 마스터(Scrum Master)
      - 프로젝트 리더, 스크럼 수행 시 문제를 인지 및 해결하는 사람
    스프린트 회고(Sprint Retrospective)
      - 스프린트 주기를 되돌아보며 정해놓은 규칙 준수 여부, 개선점 등을 확인 및 기록
      - 해당 스프린트가 끝난 시점이나 일정 주기로 시행
    번 다운 차트(Burn Down Chart)
      - 남아있는 백로그 대비 시간을 그래픽적으로 표현한 차트
      - 백로그는 보통 수직축에 위치하며 시간은 수평축에 위치

3. 린(LEAN)
    도요타의 린 시스템 품질기법을 소프트웨어 개발 프로세스에 적용해서 낭비 요소를 제거하여 품질을 향상시킨 방법론
    JIT(Just In Time), 칸반(Kanban) 보드 사용
    7가지 원칙: 낭비제거, 품질 내재화, 지식 창출, 늦은 확정, 빠른 인도, 사람 존중, 전체 최적화