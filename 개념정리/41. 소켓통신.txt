Socket
네트워크 상에서 동작하는 프로그램 간 통신의 종착점(Endpoint)이다. 즉, 프로그램이 네트워크에서 데이터를 통신할 수 있도록 연결해주는 연결부라고 볼 수 있다.
데이터를 통신할 수 있도록 연결해주기 때문에 통신할 클라이언트와 서버 모두에 소켓이 생성되어야 한다.
클라이언트가 소켓 호출하면, 클라이언트의 응용 프로그램과 서버의 응용프로그램 간에 소켓 연결이 설정된다.
애플리케이션이 네트워크를 통해서 데이터를 주고받으려면 반드시 열어야 하는 창구같은 것이다.
프로세스가 데이터를 보내거나 받기 위해서는 반드시 소켓을 열어서 소켓에 데이터를 써보내거나 소켓으로부터 데이터를 읽어들여야 한다.
소켓은 떨어져 있는 두 호스트를 연결해주는 도구로써 인터페이스의 역할을 하는데 데이터를 주고 받을 수 있는 구조체로 소켓을 통해 데이터 통로가 만들어진다.
이러한 소켓은 역할에 따라 서버 소켓, 클라이언트 소켓으로 구분된다.
소켓은 IP주소, 포트넘버, 프로토콜로 정의된다.



Socket 통신
소켓이란 두 프로그램이 서로 데이티를 주고 받을 수 있게 양쪽(두 프로그램 모두)에 생성되는 통신 단자이다.
소켓 통신은 서버와 클라이언트 양방향 연결이 이루어지는 통신으로, 클라이언트도 서버로 요청을 보낼 수 있고 서버도 클라이언트로 요청을 보낼 수 있다.
보통 스트리밍이나 실시간 채팅 등 실시간으로 데이터를 주고 받아야 하는 경우 Connection을 자주 맺고 끊는 HTTP 통신보다 소켓통신이 적합하다.
소켓 통신은 계속해서 Connection을 들고 있기 때문에 HTTP 통신에 비해 많은 리소스가 소모된다.




HTTP 통신
클라이언트에서 서버로 요청을 보내고 서버가 응답하는 방식으로 통신이 이루어진다. (단방향 통신)
응답에는 클라이언트의 요청에 따른 결과를 반환한다.
JSON, Image, HTML 파일 등 다양한 파일을 전송받을 수 있다.
응답을 받은 후 Connection이 끊어지는 것이 기본 동작이지만, 필요하다면 Keep Alive 옵션을 주어 일정 시간 동안 Connection을 유지하는 것이 가능하다.




Port
네트워크를 통해 데이터를 주고받는 프로세스를 식별하기 위해 호스트 내부적으로 프로세스가 할당받는 고유한 값이다.
한 호스트 내에서 네트워크 통신을 하고 있는 프로세스를 식별하기 위해 사용되는 값이므로, 기본적으로는 같은 호스트 내에서 서로 다른 프로세스가 같은 포트 넘버를 가질 수 없다. 




PS. 소켓과 포트는 다르다
프로세스가 네트워크 통신을 하기 위해서는 포트를 할당받아야 하는데, 서버의 경우에는 보통 하나만 할당받는다. 왜냐하면 같은 프로세스가 같은 포트를 가지고도 여러 개의 소켓을 열 수 있기 때문이다. 요게 매우 중요하다. 나도 이것을 헷갈려 했었다.
흥미롭게도 하나의 프로세스는 같은 프로토콜, 같은 IP 주소, 같은 포트 넘버를 가지는 수십 혹은 수만 개의 소켓을 가질 수 있다.
이런 이유 때문에 하나의 프로세스는 하나의 포트만으로도 다른 여러 호스트에 있는 프로세스의 요청을 처리할 수 있고, 게임 서버의 동시 접속자 수가 수십수백만이 될 수 있는 것이다.
소켓을 정의하는 것과 소켓을 식별하는 것을 구분하자. IP 주소, 포트 넘버, 프로토콜로 소켓을 정의할 수 있지만, 이것이 소켓을 유일하게 식별하진 않는다. 이름이 홍길동이라고 해도 여러 홍길동이 있는 것처럼, 같은 IP 주소, 포트 넘버, 프로토콜을 가지는 소켓이라고 해도, 서로 다른 소켓이 존재하는 것이다. 
